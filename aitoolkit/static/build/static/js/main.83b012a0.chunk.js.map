{"version":3,"sources":["components/ProjectsIndex.js","components/AddProject.js","components/Home.js","components/Dashboard.js","routes.js","serviceWorker.js","index.js"],"names":["a","axios","get","result","console","log","data","all_projects","ProjectsIndex","useState","setData","useEffect","fetchData","then","Container","Card","Group","style","marginTop","itemsPerRow","map","item","indx","key","Content","Header","title","Description","description","post","res","AddProject","postSuccess","setPostSuccess","useForm","register","handleSubmit","to","Grid","textAlign","height","verticalAlign","Column","maxWidth","Form","size","onSubmit","e","addProjectToServer","target","reset","Segment","stacked","Field","type","name","value","ref","placeholder","Button","color","fluid","Home","Dashboard","customHistory","createBrowserHistory","history","Menu","Item","position","as","Link","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83b012a0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Container, Grid, Form, Segment, Button, Card } from \"semantic-ui-react\";\n\nimport axios from \"axios\";\n\n// var config = {\n//     headers: {'Access-Control-Allow-Origin': '*'}\n// };\n\nasync function fetchData(){\n    // const result = await axios.get('http://127.0.0.1:5000/api/get_all_projects', config);\n    // const result = await axios.get('http://127.0.0.1:5000/api/get_all_projects');\n    const result = await axios.get('/api/get_all_projects');\n    console.log(result.data.all_projects);\n    return result.data.all_projects\n        \n}\n\nfunction ProjectsIndex() {\n\n    const [data, setData] = useState([])\n\n    useEffect(()=> {   \n        fetchData().then(setData);\n    }, []);\n    \n    return (\n        <Container> \n            <Card.Group style={{ marginTop: '5em' }} itemsPerRow={4}>\n                {data.map((item, indx) => \n                    <Card key={indx}>\n                        <Card.Content>\n                            <Card.Header>Project: {item.title}</Card.Header>\n                            <Card.Description>{item.description}</Card.Description>\n                        </Card.Content>\n                    </Card>\n                )}\n            </Card.Group>    \n        </Container>\n    );\n}\n\nexport default ProjectsIndex;","import React, { useEffect, useState } from 'react';\n\nimport { useForm } from 'react-hook-form';\nimport { Container, Grid, Form, Segment, Button, Card } from \"semantic-ui-react\";\nimport { Redirect } from 'react-router-dom';\n\nimport axios from \"axios\";\n\nasync function addProjectToServer(data) {\n    let res = await axios.post('/api/add_project', data);\n    console.log(res);\n}\n\nfunction AddProject() {\n    const [postSuccess, setPostSuccess] = useState(false);\n\n    const { register, handleSubmit } = useForm();\n    const onSubmit = (data,e) =>{\n        addProjectToServer(data).then(()=> {\n            setPostSuccess(true);\n            e.target.reset();\n        });\n    };\n    \n    return (\n        <Container>\n            {postSuccess && ( <Redirect to='/projects' /> )}\n            <Grid textAlign='center' style={{ height: '80vh' }} verticalAlign='middle'>\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <Form size='large' onSubmit={ handleSubmit(onSubmit) }>\n                        <Segment stacked>\n                            <Form.Field>\n                                <input type=\"hidden\" name=\"created_user\" value=\"web_user\" ref={register} />\n                                <input placeholder='Project title' name=\"title\" ref={register} />\n                            </Form.Field>\n                            <Form.Field>\n                                <input placeholder='Description' name=\"description\" ref={register} />\n                            </Form.Field>\n                            \n                            <Button color='teal' fluid size='large'>Add Project</Button>\n                        </Segment>\n                    </Form>\n                </Grid.Column>\n            </Grid>\n        </Container>\n        \n    );\n}\n\nexport default AddProject;","import React from 'react'\n\n\nfunction Home() {\n    return (\n        <div>Home</div>\n    )\n}\nexport default Home;","import React from 'react'\n\nfunction Dashboard() {\n    return (\n        <div>Dashboard</div>\n    )\n}\nexport default Dashboard;","import React from 'react';\nimport { \n    HashRouter as Router,\n    Switch,\n    Link,\n    Route\n} from 'react-router-dom';\nimport { Menu, Button } from 'semantic-ui-react'\nimport { createBrowserHistory } from \"history\";\n\nimport './index.css';\nimport ProjectsIndex from './components/ProjectsIndex';\nimport AddProject from './components/AddProject';\nimport Home from './components/Home';\nimport Dashboard from './components/Dashboard';\n\nconst customHistory = createBrowserHistory();\n\nexport default (\n    <Router history={customHistory}>\n        <Menu>\n          <Menu.Item><Link to=\"/\">Home</Link></Menu.Item>\n          <Menu.Item><Link to=\"/projects\">Projects</Link></Menu.Item>\n          <Menu.Item><Link to=\"/dashboard\">Dashboard</Link></Menu.Item>\n          <Menu.Item position='right'><Button color=\"teal\" as={Link} to=\"/addProject\">Add Project</Button></Menu.Item>\n        </Menu>\n        <Switch>\n            <Route exact path=\"/\"><Home /></Route>\n            <Route path=\"/projects\" component={ProjectsIndex} />\n            <Route path=\"/projects/:id\" />\n            <Route path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/addProject\" component={AddProject} />\n        </Switch>\n    </Router>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\n// import App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport routes from './routes';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        {routes}\n    </div>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}