{"version":3,"sources":["components/ProjectsIndex.js","components/DropZone.js","components/Uploader.js","components/ImageDataset.js","components/Project.js","components/AddProject.js","components/MyRect.js","components/AnnotationTool/MyRectangle.js","components/AnnotationTool/MyRectTransformer.js","components/AnnotatePage.js","routes.js","serviceWorker.js","index.js"],"names":["a","axios","get","result","data","all_projects","ProjectsIndex","useState","setData","useEffect","fetchData","then","Container","Card","Group","style","marginTop","itemsPerRow","map","item","indx","key","href","id","Content","Header","title","Description","description","DropZone","setImages","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onload","e","console","log","currentImages","cuid","src","target","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","className","Icon","name","size","previewStyle","display","width","height","padding","imagedata","post","res","Uploader","statusCallback","projectId","images","loading","setLoading","Dimmer","active","inverted","Loader","image","length","Button","color","fluid","onClick","addImagesToServer","response","ImageDataset","imageList","Grid","Row","columns","idx","Column","Image","image_url","pid","Project","match","setImageData","params","as","Link","to","status","AddProject","postSuccess","setPostSuccess","useForm","register","errors","handleSubmit","textAlign","verticalAlign","maxWidth","Form","onSubmit","addProjectToServer","reset","Segment","stacked","Field","type","value","ref","placeholder","required","Label","pointing","prompt","MyRect","x","y","stroke","scaleX","scaleY","strokeWidth","MyRectangle","onTransform","rectRef","useRef","current","getLayer","batchDraw","strokeScaleEnabled","draggable","onDragEnd","event","shape","onTransformEnd","setAttrs","onMouseEnter","getStage","container","cursor","draw","onMouseLeave","MyRectTransformer","selectedShapeName","trRef","selectedNode","findOne","node","attachTo","detach","ignoreStroke","rotateEnabled","image_key","AnnotatePage","predictions","setPredictions","loaded","setLoaded","predloading","setPredLoading","currentIndex","setCurrentIndex","w","h","imgSize","setImgSize","loadCount","setLoadCount","humanboxes","setHumanBoxes","boxCount","setBoxCount","boxRefs","selectedBoxName","setSelectedBoxName","mouseDown","setMouseDown","refs","makePrediction","getPredictionFromServer","imgS","image_size","handleStageMouseDown","getType","getParent","rect","find","r","handleStageMouseUp","i","createRef","onLoad","circular","changeImg","content","float","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","box","label","fill","fontSize","text","sclassName","newProps","index","handleRectChange","marginLeft","preventDefault","shortid","generate","customHistory","createBrowserHistory","history","Menu","Item","position","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22a2a341.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Container, Card } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nasync function fetchData(){\n  const result = await axios.get(process.env.REACT_APP_API_URL+'/api/get_all_projects');\n  // const result = await axios.get('/api/get_all_projects');\n  return result.data.all_projects \n}\n\nfunction ProjectsIndex() {\n  const [data, setData] = useState([])\n\n  useEffect(()=> {   \n    fetchData().then(setData);\n  }, []);\n  \n  return (\n    <Container> \n      <Card.Group style={{ marginTop: '2em' }} itemsPerRow={4}>\n        {data.map((item, indx) =>\n          <Card key={indx} href={\"/#/project/\"+ item.id} >\n            <Card.Content>\n              <Card.Header>Project: {item.title}</Card.Header>\n              <Card.Description>{item.description}</Card.Description>\n            </Card.Content>\n          </Card>\n        )}\n      </Card.Group>    \n    </Container>\n  );\n}\n\nexport default ProjectsIndex;","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport cuid from 'cuid'; //utility for construting unique IDs\nimport { Icon } from \"semantic-ui-react\";\n\n//https://github.com/react-dropzone/react-dropzone\nconst DropZone = ({ setImages }) => {\n  \n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        //setImages here\n        console.log(\"upload image\");\n        setImages(currentImages => [\n          ...currentImages, //Spred syntax\n          { id: cuid(), src: e.target.result } //what is cuid()?\n        ]);\n      };\n      reader.readAsDataURL(file);\n      \n    });\n  }, [setImages]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop }); //customized Hooks\n  return (\n    <div className=\"ui center aligned secondary segment\" {...getRootProps()}>\n      <Icon name=\"cloud upload\" size=\"big\" />\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        )}\n    </div>\n  );\n};\n\nexport default DropZone;\n","import React, { useState } from 'react';\n\nimport DropZone from './DropZone';\nimport { Button, Dimmer, Loader } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nconst previewStyle = {\n  display: 'inline',\n  width: 100,\n  height: 100,\n  padding: '3px'\n};\n\n\nasync function addImagesToServer(imagedata) {\n  let res = await axios.post(process.env.REACT_APP_API_URL+'/api/add_images', imagedata);\n  // let res = await axios.post('/api/add_images', imagedata);\n  return res.data\n}\n\nfunction Uploader( {statusCallback, projectId} ) {\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  function uploadImages(){\n    setLoading(true);\n\n    var data = {}\n    images.map(item => {\n      data[item.id] = item.src\n    });\n    var imagedata = {\n      \"project_id\": projectId,\n      \"data\":  data\n    }\n    addImagesToServer(imagedata).then(response => {\n      if(response[\"success\"]){\n        setLoading(false);\n        setImages([]);\n        statusCallback(true);\n      }\n    });\n  };\n\n  return (\n    <div>\n      {loading && (\n        <Dimmer active inverted>\n          <Loader size='medium'>Uploading</Loader>\n        </Dimmer>\n      ) }\n      <DropZone setImages={setImages} />\n      <div>\n      {images.map(image => (\n        <img\n            key={image.id}\n            src={image.src}\n            style={previewStyle}\n        />\n      ))}\n      </div>\n      {images.length > 0 && <Button color='teal' fluid size='small' onClick={uploadImages}>Submit</Button> } \n\n    </div>\n  )\n}\nexport default Uploader;","import React from 'react';\nimport { Container, Grid, Image } from \"semantic-ui-react\";\n\nconst ImageDataset = ({ imageList }) => {\n\n  return (\n    <Container>\n      <Grid>\n        <Grid.Row columns={5}>\n          {imageList.map((item, idx) => \n            <Grid.Column key={item.key}>\n              <Image src={item.image_url} />\n            </Grid.Column>\n          )}\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ImageDataset;","import React, { useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport { Container, Header, Button} from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nimport Uploader from './Uploader'\nimport ImageDataset from './ImageDataset';\n\n\nasync function fetchData(pid) {\n  const result = await axios.post(process.env.REACT_APP_API_URL + '/api/get_project_by_id', {\n    \"project_id\": pid\n  });\n  return result.data\n}\n\nfunction Project({ match }) {\n\n  const [data, setData] = useState({});\n  const [imagedata, setImageData] = useState([]);\n\n  const projectId = match.params.pid;\n\n\n  const handleStatusChange = (status) => {\n    fetchData(projectId).then(res => {\n      setData(res[\"data\"])\n      setImageData(res[\"image_data\"])\n    });\n    console.log(\"upload fetch\");\n  };\n\n  useEffect(() => {\n    fetchData(projectId).then(res => {\n      setData(res[\"data\"])\n      setImageData(res[\"image_data\"])\n    });\n    console.log(\"fetch\");\n  }, []);\n\n  return (\n    <Container>\n      <div style={{ marginTop: '2em' }}>\n        <Header as='h2'>Project: {data.title} <Button color=\"teal\" as={Link} to={\"/annotate/\" + projectId}>Start to Annotate</Button></Header>\n        <p>{data.description}</p>\n      </div>\n      \n      <div style={{ marginTop: '2em' }}>\n        <Uploader statusCallback={handleStatusChange} projectId={projectId} />\n      </div>\n      <div style={{ marginTop: '3em' }}>\n        <ImageDataset imageList={imagedata} /> \n      </div>\n      \n\n    </Container>\n  );\n}\n\nexport default Project;","import React, { useState } from 'react';\n\nimport { useForm } from 'react-hook-form';\nimport { Container, Grid, Form, Segment, Button, Label } from \"semantic-ui-react\";\nimport { Redirect } from 'react-router-dom';\n\nimport axios from \"axios\";\n\nasync function addProjectToServer(data) {\n  let res = await axios.post(process.env.REACT_APP_API_URL+'/api/add_project', data);\n  // let res = await axios.post('/api/add_project', data);\n  console.log(res);\n}\n\nfunction AddProject() {\n  const [postSuccess, setPostSuccess] = useState(false);\n\n  const { register, errors, handleSubmit } = useForm();\n  const onSubmit = (data, e) => {\n    addProjectToServer(data).then(() => {\n      setPostSuccess(true);\n      e.target.reset();\n    });\n  };\n\n  return (\n    <Container>\n      {postSuccess && (<Redirect to='/projects' />)}\n      <Grid textAlign='center' style={{ height: '80vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Form size='large' onSubmit={handleSubmit(onSubmit)}>\n            <Segment stacked>\n              <Form.Field>\n                <input type=\"hidden\" name=\"created_user\" value=\"web_user\" ref={register} />\n                <input placeholder='Project title' name=\"title\" ref={register({ required: true })} />\n                {errors.title && <Label pointing prompt>Project title is required</Label>}\n              </Form.Field>\n              <Form.Field>\n                <input placeholder='Description' name=\"description\" ref={register({ required: true })} />\n                {errors.description && <Label pointing prompt>Project description is required</Label>}\n              </Form.Field>\n\n              <Button color='teal' fluid size='large'>Add Project</Button>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </Container>\n\n  );\n}\n\nexport default AddProject;","import React from 'react'\nimport { Rect } from 'react-konva';\n\nconst MyRect = ( {x, y, width, height, stroke, name} ) => {\n\n  return (\n    <Rect\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        \n        scaleX={1}\n        scaleY={1}\n        stroke={stroke}\n        strokeWidth={2}\n        name={name}\n        \n        // save state on dragend or transformend\n        // onDragEnd={handleChange}\n        // onTransformEnd={handleChange}\n        // onMouseEnter={handleMouseEnter}\n        // onMouseLeave={handleMouseLeave}\n        // draggable\n        // ref={(node) => {\n        //   this.rect = node;\n        // }}\n    />\n  );\n};\nexport default MyRect;","import React, { useEffect, useRef } from 'react'\nimport { Rect } from 'react-konva';\n\nconst MyRectangle = ( {x, y, width, height, name, stroke, onTransform} ) => {\n\n  const rectRef = useRef();\n\n  useEffect(() => {\n    rectRef.current.getLayer().batchDraw();    \n  }, []);\n\n  const handleTransform = (event) => {\n\n    const shape = event.target;\n    \n    shape.setAttrs({\n      width: shape.width()*shape.scaleX(),\n      height: shape.height()*shape.scaleY(),\n      scaleX: 1.0, //reset scale\n      scaleY: 1.0, //reset scale\n    });\n\n    //update back to rectangles\n    onTransform({\n      width: shape.width(),\n      height: shape.height(),\n      scaleX: shape.scaleX(),\n      scaleY: shape.scaleY()\n    });\n\n  };\n  const handleChange = (event) => {\n    \n    const shape = event.target;\n    \n    onTransform({\n      x: shape.x(),\n      y: shape.y()\n    });\n  };\n  const handleMouseEnter = (event) => {\n    const shape = event.target;\n    shape.stroke('#ff4d4d');\n    shape.getStage().container().style.cursor = 'move';\n    // this.rect.draw();\n    rectRef.current.getLayer().draw();\n  };\n\n  const handleMouseLeave = (event) => {\n    const shape = event.target;\n    shape.stroke('#cc0000');\n    shape.getStage().container().style.cursor = 'crosshair';\n    // this.rect.draw();\n    rectRef.current.getLayer().draw();\n  };\n\n  return (\n    <Rect\n        ref={rectRef}\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        \n        scaleX={1}\n        scaleY={1}\n        stroke={stroke}\n        strokeWidth={3}\n        name={name}\n\n        strokeScaleEnabled={false}\n        \n        // save state on dragend or transformend\n        draggable\n        onDragEnd={handleChange}\n        onTransformEnd={handleTransform}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        \n    />\n  );\n};\nexport default MyRectangle;","import React, { useEffect, useRef } from 'react'\nimport { Transformer} from 'react-konva';\n\nfunction MyRectTransformer( {selectedShapeName} ) {\n  \n  const trRef = useRef();\n  \n  useEffect(() => {\n    const stage = trRef.current.getStage();\n    const selectedNode = stage.findOne(`.${selectedShapeName}`);\n\n    // do nothing if selected node is already attached\n    if (selectedNode === trRef.current.node()) {\n      return;\n    }\n\n    if (selectedNode) {\n      // attach to another node\n      trRef.current.attachTo(selectedNode);\n    } else {\n      // remove transformer\n      trRef.current.detach();\n    }\n    trRef.current.getLayer().batchDraw();\n\n  }, [selectedShapeName]);\n\n  return (\n    <Transformer\n        ref={trRef}\n        ignoreStroke\n        rotateEnabled={false}\n    />\n  );\n};\nexport default MyRectTransformer;","import React, { useState, useEffect, useRef, createRef } from 'react';\nimport { Container, Button } from \"semantic-ui-react\";\n\nimport { Stage, Layer, Image, Text, Group } from 'react-konva';\nimport MyRect from './MyRect';\nimport MyRectangle from './AnnotationTool/MyRectangle';\nimport MyRectTransformer from './AnnotationTool/MyRectTransformer';\nimport shortid from 'shortid';\n\n\n\n\n\nimport useImage from 'use-image';\n\nimport axios from \"axios\";\n\n\nasync function getPredictionFromServer(image_url, image_key) {\n  let res = await axios.post(process.env.REACT_APP_API_URL+'/api/get_predictions_by_image_url', {\n    \"image_url\": image_url,\n    \"image_key\": image_key\n  });\n  return res.data\n}\n\nasync function fetchData(pid) {\n  const result = await axios.post(process.env.REACT_APP_API_URL + '/api/get_project_by_id', {\n    \"project_id\": pid\n  });\n  return result.data\n}\n\nconst URLImage = ({ url, myRef }) => {\n  const [img] = useImage(url);\n  return <Image image={img} ref={myRef}/>;\n};\n\nfunction AnnotatePage({ match }) {\n\n  const [data, setData] = useState({});\n  const [imagedata, setImageData] = useState([]);\n  const [predictions, setPredictions] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [predloading, setPredLoading] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [imgSize, setImgSize] = useState({ w:0, h:0 });\n  const [loadCount, setLoadCount] = useState(0);\n\n  const [humanboxes, setHumanBoxes] = useState([]);\n  const [boxCount, setBoxCount] = useState(0);\n  const boxRefs = useRef([]);\n  const [selectedBoxName, setSelectedBoxName] = useState(\"\")\n  const [mouseDown, setMouseDown] = useState(false);\n\n\n  const refs = useRef([]);\n  const projectId = match.params.pid;  \n\n  function makePrediction(image_url, image_key){  \n    setPredLoading(true);\n    getPredictionFromServer(image_url, image_key).then(res => {\n      if(res[\"success\"]){\n        setPredictions(res[\"data\"].predictions);\n        setPredLoading(false);\n        let imgS = res[\"data\"].image_size;\n        setImgSize({\n          w: imgS[0],\n          h: imgS[1]\n        });\n        \n      }\n    });\n  }\n\n  function predict(e){\n    e.preventDefault();\n    makePrediction(imagedata[currentIndex].image_url, imagedata[currentIndex].key);\n  }\n  //------------------- handle human annotation ----------------------\n  function addNewBox(e){\n    e.preventDefault();\n    //add new bounding box\n    boxRefs.current[boxCount] = createRef();\n    setHumanBoxes(humanboxes => [\n      ...humanboxes,\n      {\n          x: 10,\n          y: 10,\n          width: 100,\n          height: 100,\n          name: `rect${boxCount + 1}`,\n          stroke: '#cc0000',\n          key: shortid.generate(),\n          ref: boxRefs.current[boxCount].current\n      }\n    ]);\n\n    setBoxCount(boxCount + 1);\n  }\n  const handleRectChange = (index, newProps) => {\n    \n    humanboxes[index] = {\n      ...humanboxes[index],\n      ...newProps,\n    };\n    \n    setHumanBoxes(humanboxes => [...humanboxes]);\n\n  };\n  // ---------------------------------------------------\n  const changeImg = (i) => {\n    setCurrentIndex(i);\n    setPredictions([]);\n    setHumanBoxes([]);\n  }\n\n  const imageLoad = (i) => {\n    setLoadCount(loadCount+1); \n  }\n\n  const handleStageMouseDown = (event) => {    \n    \n    // clicked on stage - clear selection or ready to generate new rectangle\n    if (event.target.getType() === 'Stage') {\n      // const stage = event.target.getStage();\n      setMouseDown(true);\n      setSelectedBoxName(\"\");\n      return;\n    }\n\n    // clicked on transformer - do nothing\n    const clickedOnTransformer = event.target.getParent().className === 'Transformer';\n    if (clickedOnTransformer) {\n      return;\n    }\n\n    // find clicked rect by its name\n    const name = event.target.name();\n    \n    const rect = humanboxes.find(r => r.name === name);\n    if (rect) {\n      setSelectedBoxName(name);\n    } else {\n      setSelectedBoxName(\"\");\n    }\n  }; \n  const handleStageMouseUp = () => {\n    setMouseDown(false);\n  };\n\n  useEffect(() => {\n    fetchData(projectId).then(res => {\n      setData(res[\"data\"]);\n      refs.current = [];\n      res[\"image_data\"].map((item, i) => {\n        setImageData(imagedata=>[\n          ...imagedata,\n          {\n            id: item.id,\n            key: item.key,\n            image_url: item.image_url\n          }\n        ]);\n        refs.current[i] = createRef();  \n      \n      });\n      \n      setLoaded(true);\n      \n    });\n    \n  }, []);\n  \n  return (\n    <Container>\n      <div>\n        {loaded && imagedata.map( (item, i) => \n          <img key={i} style={ {display: \"none\"} } src={item.image_url} ref={refs.current[i]} onLoad={ () => {imageLoad(i)}}/>\n        )}\n      </div>\n      \n      <div>\n        {loaded && imagedata.map( (item, i) => \n          <Button key={i} circular size=\"tiny\" onClick={ ()=> changeImg(i) } content={i} />  \n        )}\n      </div>  \n\n      {loaded && loadCount == imagedata.length && (\n        <div>\n          <div style={ {float: \"left\", display: \"block\"} }>\n            <Stage \n              style={ {float: \"left\"} } \n              width={refs.current[currentIndex].current.width} \n              height={refs.current[currentIndex].current.height}\n              onMouseDown={handleStageMouseDown}\n              onTouchStart={handleStageMouseDown}\n\n              onMouseUp={mouseDown && handleStageMouseUp}\n              onTouchEnd={mouseDown && handleStageMouseUp}\n            >\n            <Layer><Image image={refs.current[currentIndex].current}/></Layer>\n            <Layer>\n            {!predloading && predictions.map((box, idx) => \n              <Group key={idx}>\n                {/* <Rect x={box.box[1]*imgSize.w} y={box.box[0]*imgSize.h} width={(box.box[3]-box.box[1])*imgSize.w} height={ (box.box[2]-box.box[0])*imgSize.h} stroke={'#33d6ff'} strokeWidth={2} /> */}\n                <MyRect x={box.box[1]*imgSize.w} y={box.box[0]*imgSize.h} width={(box.box[3]-box.box[1])*imgSize.w} height={ (box.box[2]-box.box[0])*imgSize.h} stroke={'#33d6ff'} strokeWidth={2} name={box.label+'-'+idx}/>\n                <Text x={box.box[1]*imgSize.w} y={box.box[0]*imgSize.h} fill={'#ccf5ff'} fontSize={20} text={box.label} />\n              </Group>  \n            )}\n            </Layer>\n            <Layer>\n              {humanboxes.map((rect, i) => (\n                <MyRectangle\n                  ref={boxRefs.current[i].current}\n                  sclassName=\"rect\"\n                  key={rect.key}\n                  {...rect}\n                  \n                  onTransform={(newProps) => {\n                    handleRectChange(i, newProps);\n                  }}\n                />\n              ))}\n              <MyRectTransformer selectedShapeName={selectedBoxName} />\n            </Layer>\n            </Stage>\n          </div>\n          \n          <div style={ {float: \"left\", marginLeft: \"10px\",  display: \"block\" } }>\n          <Button onClick={predict}>Predict</Button>\n          {!predloading && predictions.map((box, idx) => \n              <div key={idx}>{box.label}</div>\n            )}\n          </div>\n          <div style={ {float: \"left\", marginLeft: \"10px\",  display: \"block\"} }>\n            <Button onClick={addNewBox}>Add</Button>\n          </div>\n        </div>  \n      )}\n\n      {/* {loaded && (\n        <AliceCarousel onSlideChanged={ changeImg }>\n          {imagedata.map( (item, i) => \n            <Stage key={item.key} width={window.innerWidth*0.75} height={window.innerHeight*0.75} >\n              <Layer>                \n                <URLImage url={item.image_url} myRef={refs.current[i]} width={1024} height={600}/>\n              </Layer> \n            </Stage>\n          )}\n        </AliceCarousel>\n      )} */}\n      {/* <Stage width={imgSize.w} height={imgSize.h}>\n      <Layer>\n        {predictions.length > 0 &&(\n          <Image image={refs.current[currentIndex].current.attrs.image} />\n        )}\n        {!predloading && predictions.map((box, idx) => \n          <Group key={idx}>\n            <Rect x={box.box[1]*imgSize.w} y={box.box[0]*imgSize.h} width={(box.box[3]-box.box[1])*imgSize.w} height={ (box.box[2]-box.box[0])*imgSize.h} stroke={'#33d6ff'} strokeWidth={2} />\n            <Text x={box.box[1]*imgSize.w} y={box.box[0]*imgSize.h} fill={'#ccf5ff'} fontSize={20} text={box.label} />\n          </Group>  \n        )}  \n      </Layer>    \n      </Stage> */}\n      \n    </Container>\n  )\n}\nexport default AnnotatePage;","import React from 'react';\nimport { \n    HashRouter as Router,\n    Switch,\n    Link,\n    Route\n} from 'react-router-dom';\nimport { Menu, Button } from 'semantic-ui-react'\nimport { createBrowserHistory } from \"history\";\n\nimport './index.css';\nimport ProjectsIndex from './components/ProjectsIndex';\nimport Project from './components/Project';\nimport AddProject from './components/AddProject';\nimport AnnotatePage from './components/AnnotatePage';\n\nconst customHistory = createBrowserHistory();\n\nexport default (\n    <Router history={customHistory}>\n        <Menu>\n          <Menu.Item><Link to=\"/\">Home</Link></Menu.Item>\n          <Menu.Item position='right'><Button color=\"teal\" as={Link} to=\"/addProject\">Add Project</Button></Menu.Item>\n        </Menu>\n        <Switch>\n            <Route exact path=\"/\" component={ProjectsIndex} />\n            <Route path=\"/projects\" component={ProjectsIndex} />\n            <Route path=\"/project/:pid\" component={Project} />\n            <Route path=\"/annotate/:pid\" component={AnnotatePage} />\n            <Route path=\"/addProject\" component={AddProject} />\n        </Switch>\n    </Router>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\n// import App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport routes from './routes';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        {routes}\n    </div>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}