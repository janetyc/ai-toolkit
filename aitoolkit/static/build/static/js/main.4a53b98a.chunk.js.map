{"version":3,"sources":["components/ProjectsIndex.js","components/AddProject.js","components/DropZone.js","components/Home.js","components/Dashboard.js","routes.js","serviceWorker.js","index.js"],"names":["a","axios","get","result","console","log","data","all_projects","ProjectsIndex","useState","setData","useEffect","fetchData","then","Container","Card","Group","style","marginTop","itemsPerRow","map","item","indx","key","Content","Header","title","Description","description","post","res","AddProject","postSuccess","setPostSuccess","useForm","register","errors","handleSubmit","to","Grid","textAlign","height","verticalAlign","Column","maxWidth","Form","size","onSubmit","e","addProjectToServer","target","reset","Segment","stacked","Field","type","name","value","ref","placeholder","required","Label","pointing","prompt","Button","color","fluid","DropZone","setImages","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onload","currentImages","id","cuid","src","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","className","previewStyle","display","width","padding","imagedata","Home","images","image","length","onClick","FormData","addImagesToServer","response","Dashboard","customHistory","createBrowserHistory","history","Menu","Item","position","as","Link","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a53b98a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Container, Card } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nasync function fetchData(){\n  // const result = await axios.get('http://127.0.0.1:5000/api/get_all_projects');\n  const result = await axios.get('/api/get_all_projects');\n  console.log(result.data.all_projects);\n  return result.data.all_projects \n}\n\nfunction ProjectsIndex() {\n  const [data, setData] = useState([])\n\n  useEffect(()=> {   \n    fetchData().then(setData);\n  }, []);\n  \n  return (\n    <Container> \n      <Card.Group style={{ marginTop: '5em' }} itemsPerRow={4}>\n        {data.map((item, indx) => \n          <Card key={indx}>\n            <Card.Content>\n              <Card.Header>Project: {item.title}</Card.Header>\n              <Card.Description>{item.description}</Card.Description>\n            </Card.Content>\n          </Card>\n        )}\n      </Card.Group>    \n    </Container>\n  );\n}\n\nexport default ProjectsIndex;","import React, { useState } from 'react';\n\nimport { useForm } from 'react-hook-form';\nimport { Container, Grid, Form, Segment, Button, Label } from \"semantic-ui-react\";\nimport { Redirect } from 'react-router-dom';\n\nimport axios from \"axios\";\n\nasync function addProjectToServer(data) {\n  // let res = await axios.post('http://127.0.0.1:5000/api/add_project', data);\n  let res = await axios.post('/api/add_project', data);\n  console.log(res);\n}\n\nfunction AddProject() {\n  const [postSuccess, setPostSuccess] = useState(false);\n\n  const { register, errors, handleSubmit } = useForm();\n  const onSubmit = (data, e) => {\n    addProjectToServer(data).then(() => {\n      setPostSuccess(true);\n      e.target.reset();\n    });\n  };\n\n  return (\n    <Container>\n      {postSuccess && (<Redirect to='/projects' />)}\n      <Grid textAlign='center' style={{ height: '80vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Form size='large' onSubmit={handleSubmit(onSubmit)}>\n            <Segment stacked>\n              <Form.Field>\n                <input type=\"hidden\" name=\"created_user\" value=\"web_user\" ref={register} />\n                <input placeholder='Project title' name=\"title\" ref={register({ required: true })} />\n                {errors.title && <Label pointing prompt>Project title is required</Label>}\n              </Form.Field>\n              <Form.Field>\n                <input placeholder='Description' name=\"description\" ref={register({ required: true })} />\n                {errors.description && <Label pointing prompt>Project description is required</Label>}\n              </Form.Field>\n\n              <Button color='teal' fluid size='large'>Add Project</Button>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </Container>\n\n  );\n}\n\nexport default AddProject;","import React, { Container, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport cuid from 'cuid'; //utility for construting unique IDs\n\n// import styled from '@emotion/styled';\n\n// const Container = styled.div`\n//   display: flex;\n//   width: 80%;\n//   height: 400px;\n//   margin: 20px auto 0 auto;\n//   background: lightgray;\n//   border: 4px dotted darkgray;\n//   justify-content: center;\n//   align-items: center;\n//   cursor: pointer;\n// `;\n\n//https://github.com/react-dropzone/react-dropzone\nconst DropZone = ({ setImages }) => {\n  \n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        //setImages here\n        console.log(\"upload image\");\n        setImages(currentImages => [\n          ...currentImages, //Spred syntax\n          { id: cuid(), src: e.target.result } //what is cuid()?\n        ]);\n      };\n      reader.readAsDataURL(file);\n      \n    });\n  }, [setImages]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop }); //customized Hooks\n  return (\n    <div className=\"ui center aligned tertiary blue inverted segment\" {...getRootProps()}>\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        )}\n    </div>\n  );\n};\n\nexport default DropZone;\n","import React, { useState } from 'react';\n\nimport DropZone from './DropZone';\nimport { Button } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nconst previewStyle = {\n  display: 'inline',\n  width: 100,\n  height: 100,\n  padding: '3px'\n};\nconst config = { headers: { 'Content-Type': 'multipart/form-data' } };\n\nasync function addImagesToServer(imagedata) {\n  let res = await axios.post('/api/add_images', imagedata);\n  // let res = await axios.post('http://127.0.0.1:5000/api/add_images', imagedata);\n  return res.data\n}\n\nfunction Home() {\n  const [images, setImages] = useState([]);\n  const [postSuccess, setPostSuccess] = useState(false);\n\n  \n  function uploadImages(){\n    var fdata = new FormData();\n    var data = {}\n    images.map(item => {\n      data[item.id] = item.src\n    });\n    addImagesToServer(data).then(response => {\n      if(response[\"success\"]){\n        console.log(response[\"data\"][\"images\"])\n        setImages([]);\n      }\n    });\n  };\n\n  return (\n    <div>\n      <DropZone setImages={setImages} />\n      <div>\n      {images.map(image => (\n        <img\n            key={image.id}\n            src={image.src}\n            style={previewStyle}\n        />\n      ))}\n      </div>\n      {images.length > 0 && <Button color='teal' fluid size='small' onClick={uploadImages}>Submit</Button> } \n\n    </div>\n  )\n}\nexport default Home;","import React from 'react'\n\nfunction Dashboard() {\n  return (\n    <div></div>\n  )\n}\nexport default Dashboard;","import React from 'react';\nimport { \n    Router,\n    Switch,\n    Link,\n    Route\n} from 'react-router-dom';\nimport { Menu, Button } from 'semantic-ui-react'\nimport { createBrowserHistory } from \"history\";\n\nimport './index.css';\nimport ProjectsIndex from './components/ProjectsIndex';\nimport AddProject from './components/AddProject';\nimport Home from './components/Home';\nimport Dashboard from './components/Dashboard';\n\nconst customHistory = createBrowserHistory();\n\nexport default (\n    <Router history={customHistory}>\n        <Menu>\n          <Menu.Item><Link to=\"/\">Home</Link></Menu.Item>\n          <Menu.Item><Link to=\"/projects\">Projects</Link></Menu.Item>\n          <Menu.Item><Link to=\"/dashboard\">Dashboard</Link></Menu.Item>\n          <Menu.Item position='right'><Button color=\"teal\" as={Link} to=\"/addProject\">Add Project</Button></Menu.Item>\n        </Menu>\n        <Switch>\n            <Route exact path=\"/\"><Home /></Route>\n            <Route path=\"/projects\" component={ProjectsIndex} />\n            <Route path=\"/projects/:id\" />\n            <Route path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/addProject\" component={AddProject} />\n        </Switch>\n    </Router>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\n// import App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport routes from './routes';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        {routes}\n    </div>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}