{"version":3,"sources":["components/ProjectsIndex.js","components/DropZone.js","components/Uploader.js","components/ImageDataset.js","components/Project.js","components/AddProject.js","components/Home.js","components/Dashboard.js","routes.js","serviceWorker.js","index.js"],"names":["a","axios","get","result","data","all_projects","ProjectsIndex","useState","setData","useEffect","fetchData","then","Container","Card","Group","style","marginTop","itemsPerRow","map","item","indx","key","href","id","Content","Header","title","Description","description","DropZone","setImages","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onload","e","console","log","currentImages","cuid","src","target","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","className","Icon","name","size","previewStyle","display","width","height","padding","imagedata","post","res","Uploader","statusCallback","projectId","images","image","length","Button","color","fluid","onClick","addImagesToServer","response","ImageDataset","imageList","Grid","Row","columns","idx","Column","Image","image_url","pid","Project","match","setImageData","params","as","status","AddProject","postSuccess","setPostSuccess","useForm","register","errors","handleSubmit","to","textAlign","verticalAlign","maxWidth","Form","onSubmit","addProjectToServer","reset","Segment","stacked","Field","type","value","ref","placeholder","required","Label","pointing","prompt","Home","Dashboard","customHistory","createBrowserHistory","history","Menu","Item","position","Link","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f3f4d57.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Container, Card } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nasync function fetchData(){\n  const result = await axios.get(process.env.REACT_APP_API_URL+'/api/get_all_projects');\n  // const result = await axios.get('/api/get_all_projects');\n  return result.data.all_projects \n}\n\nfunction ProjectsIndex() {\n  const [data, setData] = useState([])\n\n  useEffect(()=> {   \n    fetchData().then(setData);\n  }, []);\n  \n  return (\n    <Container> \n      <Card.Group style={{ marginTop: '2em' }} itemsPerRow={4}>\n        {data.map((item, indx) =>\n          <Card key={indx} href={\"/#/project/\"+ item.id} >\n            <Card.Content>\n              <Card.Header>Project: {item.title}</Card.Header>\n              <Card.Description>{item.description}</Card.Description>\n            </Card.Content>\n          </Card>\n        )}\n      </Card.Group>    \n    </Container>\n  );\n}\n\nexport default ProjectsIndex;","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport cuid from 'cuid'; //utility for construting unique IDs\nimport { Icon } from \"semantic-ui-react\";\n\n//https://github.com/react-dropzone/react-dropzone\nconst DropZone = ({ setImages }) => {\n  \n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        //setImages here\n        console.log(\"upload image\");\n        setImages(currentImages => [\n          ...currentImages, //Spred syntax\n          { id: cuid(), src: e.target.result } //what is cuid()?\n        ]);\n      };\n      reader.readAsDataURL(file);\n      \n    });\n  }, [setImages]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop }); //customized Hooks\n  return (\n    <div className=\"ui center aligned tertiary blue inverted segment\" {...getRootProps()}>\n      <Icon name=\"cloud upload\" size=\"big\" />\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        )}\n    </div>\n  );\n};\n\nexport default DropZone;\n","import React, { useState } from 'react';\n\nimport DropZone from './DropZone';\nimport { Button } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nconst previewStyle = {\n  display: 'inline',\n  width: 100,\n  height: 100,\n  padding: '3px'\n};\n\nasync function addImagesToServer(imagedata) {\n  let res = await axios.post(process.env.REACT_APP_API_URL+'/api/add_images', imagedata);\n  // let res = await axios.post('/api/add_images', imagedata);\n  return res.data\n}\n\nfunction Uploader( {statusCallback, projectId} ) {\n  const [images, setImages] = useState([]);\n\n  function uploadImages(){\n    var data = {}\n    images.map(item => {\n      data[item.id] = item.src\n    });\n    var imagedata = {\n      \"project_id\": projectId,\n      \"data\":  data\n    }\n    addImagesToServer(imagedata).then(response => {\n      if(response[\"success\"]){ \n        setImages([]);\n        statusCallback(true);\n      }\n    });\n  };\n\n  return (\n    <div>\n      <DropZone setImages={setImages} />\n      <div>\n      {images.map(image => (\n        <img\n            key={image.id}\n            src={image.src}\n            style={previewStyle}\n        />\n      ))}\n      </div>\n      {images.length > 0 && <Button color='teal' fluid size='small' onClick={uploadImages}>Submit</Button> } \n\n    </div>\n  )\n}\nexport default Uploader;","import React from 'react';\nimport { Container, Grid, Image } from \"semantic-ui-react\";\n\nconst ImageDataset = ({ imageList }) => {\n\n\n\n  return (\n    <Container>\n      <Grid>\n        <Grid.Row columns={5}>\n          {imageList.map((item, idx) => \n            <Grid.Column key={item.key}>\n              <Image src={item.image_url} />\n            </Grid.Column>\n          )}\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ImageDataset;","import React, { useEffect, useState, useCallback } from 'react';\n\nimport { Container, Header, Button } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nimport Uploader from './Uploader'\nimport ImageDataset from './ImageDataset';\n\n\nasync function fetchData(pid) {\n  const result = await axios.post(process.env.REACT_APP_API_URL + '/api/get_project_by_id', {\n    \"project_id\": pid\n  });\n  return result.data\n}\n\nfunction Project({ match }) {\n\n  const [data, setData] = useState({})\n  const [imagedata, setImageData] = useState([])\n\n  const projectId = match.params.pid;\n\n\n  const handleStatusChange = (status) => {\n    fetchData(projectId).then(res => {\n      setData(res[\"data\"])\n      setImageData(res[\"image_data\"])\n    });\n    console.log(\"upload fetch\");\n  };\n\n  useEffect(() => {\n    fetchData(projectId).then(res => {\n      setData(res[\"data\"])\n      setImageData(res[\"image_data\"])\n    });\n    console.log(\"fetch\");\n  }, []);\n\n  return (\n    <Container>\n      <div style={{ marginTop: '2em' }}>\n        <Header as='h2'>Project: {data.title} <Button color=\"teal\" >Start to Annotate</Button></Header>\n        <p>{data.description}</p>\n      </div>\n      \n      <div style={{ marginTop: '2em' }}>\n        <Uploader statusCallback={handleStatusChange} projectId={projectId} />\n      </div>\n      <div style={{ marginTop: '3em' }}>\n        <ImageDataset imageList={imagedata} /> \n      </div>\n      \n\n    </Container>\n  );\n}\n\nexport default Project;","import React, { useState } from 'react';\n\nimport { useForm } from 'react-hook-form';\nimport { Container, Grid, Form, Segment, Button, Label } from \"semantic-ui-react\";\nimport { Redirect } from 'react-router-dom';\n\nimport axios from \"axios\";\n\nasync function addProjectToServer(data) {\n  let res = await axios.post(process.env.REACT_APP_API_URL+'/api/add_project', data);\n  // let res = await axios.post('/api/add_project', data);\n  console.log(res);\n}\n\nfunction AddProject() {\n  const [postSuccess, setPostSuccess] = useState(false);\n\n  const { register, errors, handleSubmit } = useForm();\n  const onSubmit = (data, e) => {\n    addProjectToServer(data).then(() => {\n      setPostSuccess(true);\n      e.target.reset();\n    });\n  };\n\n  return (\n    <Container>\n      {postSuccess && (<Redirect to='/projects' />)}\n      <Grid textAlign='center' style={{ height: '80vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Form size='large' onSubmit={handleSubmit(onSubmit)}>\n            <Segment stacked>\n              <Form.Field>\n                <input type=\"hidden\" name=\"created_user\" value=\"web_user\" ref={register} />\n                <input placeholder='Project title' name=\"title\" ref={register({ required: true })} />\n                {errors.title && <Label pointing prompt>Project title is required</Label>}\n              </Form.Field>\n              <Form.Field>\n                <input placeholder='Description' name=\"description\" ref={register({ required: true })} />\n                {errors.description && <Label pointing prompt>Project description is required</Label>}\n              </Form.Field>\n\n              <Button color='teal' fluid size='large'>Add Project</Button>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </Container>\n\n  );\n}\n\nexport default AddProject;","import React from 'react'\n\nfunction Home() {\n  return (\n    <div></div>\n  )\n}\nexport default Home;","import React from 'react'\n\nfunction Dashboard() {\n  return (\n    <div></div>\n  )\n}\nexport default Dashboard;","import React from 'react';\nimport { \n    HashRouter as Router,\n    Switch,\n    Link,\n    Route\n} from 'react-router-dom';\nimport { Menu, Button } from 'semantic-ui-react'\nimport { createBrowserHistory } from \"history\";\n\nimport './index.css';\nimport ProjectsIndex from './components/ProjectsIndex';\nimport Project from './components/Project';\nimport AddProject from './components/AddProject';\nimport Home from './components/Home';\nimport Dashboard from './components/Dashboard';\n\nconst customHistory = createBrowserHistory();\n\nexport default (\n    <Router history={customHistory}>\n        <Menu>\n          <Menu.Item><Link to=\"/\">Home</Link></Menu.Item>\n          <Menu.Item><Link to=\"/projects\">Projects</Link></Menu.Item>\n          <Menu.Item><Link to=\"/dashboard\">Dashboard</Link></Menu.Item>\n          <Menu.Item position='right'><Button color=\"teal\" as={Link} to=\"/addProject\">Add Project</Button></Menu.Item>\n        </Menu>\n        <Switch>\n            <Route exact path=\"/\"><Home /></Route>\n            <Route path=\"/projects\" component={ProjectsIndex} />\n            <Route path=\"/project/:pid\" component={Project} />\n            <Route path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/addProject\" component={AddProject} />\n        </Switch>\n    </Router>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\n// import App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport routes from './routes';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        {routes}\n    </div>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}