{"version":3,"sources":["components/ProjectsIndex.js","components/DropZone.js","components/Uploader.js","components/ImageDataset.js","components/Project.js","components/AddProject.js","components/MyRect.js","components/AnnotationTool/MyRectangle.js","components/AnnotationTool/MyRectTransformer.js","components/AnnotatePage.js","components/CrowdTasks/ObjectStoryMTask.js","components/Dashboard/ProjectManagement.js","routes.js","serviceWorker.js","index.js"],"names":["a","axios","get","result","data","all_projects","ProjectsIndex","useState","setData","useEffect","fetchData","then","Container","Card","Group","style","marginTop","itemsPerRow","map","item","indx","key","href","id","Content","Header","title","Description","description","DropZone","setImages","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onload","e","console","log","currentImages","cuid","src","target","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","className","Icon","name","size","previewStyle","display","width","height","padding","imagedata","post","res","Uploader","statusCallback","projectId","images","loading","setLoading","Dimmer","active","inverted","Loader","image","length","Button","color","fluid","onClick","addImagesToServer","response","ImageDataset","imageList","idx","Image","image_url","extra","attached","as","Link","to","pid","Project","match","setImageData","params","marginLeft","status","AddProject","postSuccess","setPostSuccess","useForm","register","errors","handleSubmit","Grid","textAlign","verticalAlign","Column","maxWidth","Form","onSubmit","addProjectToServer","reset","Segment","stacked","Field","type","value","ref","placeholder","required","Label","pointing","prompt","MyRect","x","y","stroke","scaleX","scaleY","strokeWidth","MyRectangle","onTransform","onEnter","onLeave","rectRef","useRef","current","getLayer","batchDraw","strokeScaleEnabled","draggable","onDragEnd","event","shape","onTransformEnd","setAttrs","onMouseEnter","getStage","container","cursor","draw","onMouseLeave","MyRectTransformer","selectedShapeName","trRef","selectedNode","findOne","node","attachTo","detach","ignoreStroke","rotateEnabled","image_key","AnnotatePage","predictions","setPredictions","loaded","setLoaded","predloading","setPredLoading","currentIndex","setCurrentIndex","w","h","imgSize","setImgSize","loadCount","setLoadCount","humanboxes","setHumanBoxes","boxCount","setBoxCount","boxRefs","selectedBoxName","setSelectedBoxName","mouseDown","setMouseDown","refs","makePrediction","getPredictionFromServer","imgS","image_size","handleStageMouseDown","getType","getParent","rect","find","r","handleStageMouseUp","i","createRef","onLoad","circular","changeImg","content","float","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","box","label","fill","fontSize","text","sclassName","newProps","index","handleRectChange","preventDefault","shortid","generate","imgId","ObjectStoryMtask","setLoad","setStoryLoad","imageloaded","setImageLoad","imgRef","storyData","setStoryData","hoverBoxName","setHoverBoxName","imageId","imgid","worker","mode","defaultValue","story","object","control","formState","useFieldArray","append","remove","fetchImageData","fetchStoryData","celled","Row","object_list","j","imageH","push","addObjectStoryToServer","block","minHeight","boxKey","lable","marginBottom","handleLabelMouseEnter","handleLabelMouseLeave","aria-hidden","splice","isValid","disabled","mini","Divider","toString","ProjectManagement","getProjectData","fetchProjectData","Item","divided","Extra","img","img_indx","customHistory","createBrowserHistory","history","Menu","position","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.905a42b5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Container, Card } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nasync function fetchData(){\n  const result = await axios.get(process.env.REACT_APP_API_URL+'/api/get_all_projects');\n  // const result = await axios.get('/api/get_all_projects');\n  return result.data.all_projects \n}\n\nfunction ProjectsIndex() {\n  const [data, setData] = useState([]);\n\n  useEffect(()=> {   \n    fetchData().then(setData);\n  }, []);\n  \n  return (\n    <Container>\n      <Card.Group style={{ marginTop: '2em' }} itemsPerRow={4}>\n        {data.map((item, indx) =>\n          <Card key={indx} href={\"/#/project/\"+ item.id} >\n            <Card.Content>\n              <Card.Header>Project: {item.title}</Card.Header>\n              <Card.Description>{item.description}</Card.Description>\n            </Card.Content>\n          </Card>\n        )}\n      </Card.Group>    \n    </Container>\n  );\n}\n\nexport default ProjectsIndex;","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport cuid from 'cuid'; //utility for construting unique IDs\nimport { Icon } from \"semantic-ui-react\";\n\n//https://github.com/react-dropzone/react-dropzone\nconst DropZone = ({ setImages }) => {\n  \n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        //setImages here\n        console.log(\"upload image\");\n        setImages(currentImages => [\n          ...currentImages, //Spred syntax\n          { id: cuid(), src: e.target.result } //what is cuid()?\n        ]);\n      };\n      reader.readAsDataURL(file);\n      \n    });\n  }, [setImages]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop }); //customized Hooks\n  return (\n    <div className=\"ui center aligned secondary segment\" {...getRootProps()}>\n      <Icon name=\"cloud upload\" size=\"big\" />\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n          <p>Drag 'n' drop some files here, or click to select files</p>\n        )}\n    </div>\n  );\n};\n\nexport default DropZone;\n","import React, { useState } from 'react';\n\nimport DropZone from './DropZone';\nimport { Button, Dimmer, Loader } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nconst previewStyle = {\n  display: 'inline',\n  width: 100,\n  height: 100,\n  padding: '3px'\n};\n\n\nasync function addImagesToServer(imagedata) {\n  let res = await axios.post(process.env.REACT_APP_API_URL+'/api/add_images', imagedata);\n  // let res = await axios.post('/api/add_images', imagedata);\n  return res.data\n}\n\nfunction Uploader( {statusCallback, projectId} ) {\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  function uploadImages(){\n    setLoading(true);\n\n    var data = {}\n    images.map(item => {\n      data[item.id] = item.src\n    });\n    var imagedata = {\n      \"project_id\": projectId,\n      \"data\":  data\n    }\n    addImagesToServer(imagedata).then(response => {\n      if(response[\"success\"]){\n        setLoading(false);\n        setImages([]);\n        statusCallback(true);\n      }\n    });\n  };\n\n  return (\n    <div>\n      {loading && (\n        <Dimmer active inverted>\n          <Loader size='medium'>Uploading</Loader>\n        </Dimmer>\n      ) }\n      <DropZone setImages={setImages} />\n      <div>\n      {images.map(image => (\n        <img\n            key={image.id}\n            src={image.src}\n            style={previewStyle}\n        />\n      ))}\n      </div>\n      {images.length > 0 && <Button color='teal' fluid size='small' onClick={uploadImages}>Submit</Button> } \n\n    </div>\n  )\n}\nexport default Uploader;","import React from 'react';\nimport { Container, Card, Image, Button} from \"semantic-ui-react\";\nimport { Link } from 'react-router-dom';\n\nconst ImageDataset = ({ imageList }) => {\n\n  return (\n    <Container>\n      <Card.Group itemsPerRow={5}>\n        {imageList.map((item, idx) => \n          <Card key={item.key}>\n            <Card.Content>\n            <Image src={item.image_url} />\n            </Card.Content>\n            <Card.Content extra><Button attached='bottom' as={Link} to={\"/annotateObjectStory/\" + item.id}>Tell a Story</Button></Card.Content>\n          </Card>\n        )}\n      </Card.Group>\n    </Container>\n  );\n};\n\nexport default ImageDataset;","import React, { useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport { Container, Header, Button} from \"semantic-ui-react\";\nimport axios from \"axios\";\n\nimport Uploader from './Uploader'\nimport ImageDataset from './ImageDataset';\n\n\nasync function fetchData(pid) {\n  const result = await axios.post(process.env.REACT_APP_API_URL + '/api/get_project_by_id', {\n    \"project_id\": pid\n  });\n  return result.data\n}\n\nfunction Project({ match }) {\n\n  const [data, setData] = useState({});\n  const [imagedata, setImageData] = useState([]);\n\n  const projectId = match.params.pid;\n\n\n  const handleStatusChange = (status) => {\n    fetchData(projectId).then(res => {\n      setData(res[\"data\"])\n      setImageData(res[\"image_data\"])\n    });\n    console.log(\"upload fetch\");\n  };\n\n  useEffect(() => {\n    fetchData(projectId).then(res => {\n      setData(res[\"data\"])\n      setImageData(res[\"image_data\"])\n    });\n    console.log(\"fetch\");\n  }, []);\n\n  return (\n    <Container>\n      <div style={{ marginTop: '2em' }}>\n        <Header as='h2'>Project: {data.title} \n          {imagedata.length !== 0 && \n            <Button style={ {marginLeft: \"7px\"} }  color=\"teal\" as={Link} to={\"/annotate/\" + projectId}>Start to Annotate</Button>\n          }\n        </Header>\n        <p>{data.description}</p>\n      </div>\n      \n      <div style={{ marginTop: '2em' }}>\n        <Uploader statusCallback={handleStatusChange} projectId={projectId} />\n      </div>\n      <div style={{ marginTop: '3em' }}>\n        <ImageDataset imageList={imagedata} /> \n      </div>\n      \n\n    </Container>\n  );\n}\n\nexport default Project;","import React, { useState } from 'react';\n\nimport { useForm } from 'react-hook-form';\nimport { Container, Grid, Form, Segment, Button, Label } from \"semantic-ui-react\";\nimport { Redirect } from 'react-router-dom';\n\nimport axios from \"axios\";\n\nasync function addProjectToServer(data) {\n  let res = await axios.post(process.env.REACT_APP_API_URL+'/api/add_project', data);\n  // let res = await axios.post('/api/add_project', data);\n  console.log(res);\n}\n\nfunction AddProject() {\n  const [postSuccess, setPostSuccess] = useState(false);\n\n  const { register, errors, handleSubmit } = useForm();\n  const onSubmit = (data, e) => {\n    addProjectToServer(data).then(() => {\n      setPostSuccess(true);\n      e.target.reset();\n    });\n  };\n\n  return (\n    <Container>\n      {postSuccess && (<Redirect to='/projects' />)}\n      <Grid textAlign='center' style={{ height: '80vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Form size='large' onSubmit={handleSubmit(onSubmit)}>\n            <Segment stacked>\n              <Form.Field>\n                <input type=\"hidden\" name=\"created_user\" value=\"web_user\" ref={register} />\n                <input placeholder='Project title' name=\"title\" ref={register({ required: true })} />\n                {errors.title && <Label pointing prompt>Project title is required</Label>}\n              </Form.Field>\n              <Form.Field>\n                <input placeholder='Description' name=\"description\" ref={register({ required: true })} />\n                {errors.description && <Label pointing prompt>Project description is required</Label>}\n              </Form.Field>\n\n              <Button color='teal' fluid size='large'>Add Project</Button>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </Container>\n\n  );\n}\n\nexport default AddProject;","import React from 'react'\nimport { Rect } from 'react-konva';\n\nconst MyRect = ( {x, y, width, height, stroke, name} ) => {\n\n  return (\n    <Rect\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        \n        scaleX={1}\n        scaleY={1}\n        stroke={stroke}\n        strokeWidth={2}\n        name={name}\n        \n        // save state on dragend or transformend\n        // onDragEnd={handleChange}\n        // onTransformEnd={handleChange}\n        // onMouseEnter={handleMouseEnter}\n        // onMouseLeave={handleMouseLeave}\n        // draggable\n        // ref={(node) => {\n        //   this.rect = node;\n        // }}\n    />\n  );\n};\nexport default MyRect;","import React, { useEffect, useRef } from 'react'\nimport { Rect } from 'react-konva';\n\nconst MyRectangle = ( {x, y, width, height, name, stroke, onTransform, onEnter, onLeave} ) => {\n\n  const rectRef = useRef();\n\n  useEffect(() => {\n    rectRef.current.getLayer().batchDraw();    \n  }, []);\n\n  const handleTransform = (event) => {\n\n    const shape = event.target;\n    \n    shape.setAttrs({\n      width: shape.width()*shape.scaleX(),\n      height: shape.height()*shape.scaleY(),\n      scaleX: 1.0, //reset scale\n      scaleY: 1.0, //reset scale\n    });\n\n    //update back to rectangles\n    onTransform({\n      width: shape.width(),\n      height: shape.height(),\n      scaleX: shape.scaleX(),\n      scaleY: shape.scaleY()\n    });\n\n  };\n  const handleChange = (event) => {\n    \n    const shape = event.target;\n    \n    onTransform({\n      x: shape.x(),\n      y: shape.y()\n    });\n  };\n  const handleMouseEnter = (event) => {\n    const shape = event.target;\n    shape.stroke('#8AE1FF');\n    shape.getStage().container().style.cursor = 'move';\n    // this.rect.draw();\n    rectRef.current.getLayer().draw();\n    onEnter(shape.name());\n    \n  };\n\n  const handleMouseLeave = (event) => {\n    const shape = event.target;\n    shape.stroke('#2982F9');\n    shape.getStage().container().style.cursor = 'crosshair';\n    // this.rect.draw();\n    rectRef.current.getLayer().draw();\n    onLeave(shape.name());\n  };\n\n  return (\n    <Rect\n        ref={rectRef}\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        \n        scaleX={1}\n        scaleY={1}\n        stroke={stroke}\n        strokeWidth={3}\n        name={name}\n\n        strokeScaleEnabled={false}\n        \n        // save state on dragend or transformend\n        draggable\n        onDragEnd={handleChange}\n        onTransformEnd={handleTransform}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        \n    />\n  );\n};\nexport default MyRectangle;","import React, { useEffect, useRef } from 'react'\nimport { Transformer} from 'react-konva';\n\nfunction MyRectTransformer( {selectedShapeName} ) {\n  \n  const trRef = useRef();\n  \n  useEffect(() => {\n    const stage = trRef.current.getStage();\n    const selectedNode = stage.findOne(`.${selectedShapeName}`);\n\n    // do nothing if selected node is already attached\n    if (selectedNode === trRef.current.node()) {\n      return;\n    }\n\n    if (selectedNode) {\n      // attach to another node\n      trRef.current.attachTo(selectedNode);\n    } else {\n      // remove transformer\n      trRef.current.detach();\n    }\n    trRef.current.getLayer().batchDraw();\n\n  }, [selectedShapeName]);\n\n  return (\n    <Transformer\n        ref={trRef}\n        ignoreStroke\n        rotateEnabled={false}\n    />\n  );\n};\nexport default MyRectTransformer;","import React, { useState, useEffect, useRef, createRef } from 'react';\nimport { Container, Button } from \"semantic-ui-react\";\n\nimport { Stage, Layer, Image, Text, Group } from 'react-konva';\nimport MyRect from './MyRect';\nimport MyRectangle from './AnnotationTool/MyRectangle';\nimport MyRectTransformer from './AnnotationTool/MyRectTransformer';\nimport shortid from 'shortid';\nimport useImage from 'use-image';\n\nimport axios from \"axios\";\n\nasync function getPredictionFromServer(image_url, image_key) {\n  let res = await axios.post(process.env.REACT_APP_API_URL+'/api/get_predictions_by_image_url', {\n    \"image_url\": image_url,\n    \"image_key\": image_key\n  });\n  return res.data\n}\n\nasync function fetchData(pid) {\n  const result = await axios.post(process.env.REACT_APP_API_URL + '/api/get_project_by_id', {\n    \"project_id\": pid\n  });\n  return result.data\n}\n\nconst URLImage = ({ url, myRef }) => {\n  const [img] = useImage(url);\n  return <Image image={img} ref={myRef}/>;\n};\n\nfunction AnnotatePage({ match }) {\n\n  const [data, setData] = useState({});\n  const [imagedata, setImageData] = useState([]);\n  const [predictions, setPredictions] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [predloading, setPredLoading] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [imgSize, setImgSize] = useState({ w:0, h:0 });\n  const [loadCount, setLoadCount] = useState(0);\n\n  const [humanboxes, setHumanBoxes] = useState([]);\n  const [boxCount, setBoxCount] = useState(0);\n  const boxRefs = useRef([]);\n  const [selectedBoxName, setSelectedBoxName] = useState(\"\")\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const refs = useRef([]);\n  const projectId = match.params.pid;\n\n  function makePrediction(image_url, image_key){  \n    setPredLoading(true);\n    getPredictionFromServer(image_url, image_key).then(res => {\n      if(res[\"success\"]){\n        setPredictions(res[\"data\"].predictions);\n        setPredLoading(false);\n        let imgS = res[\"data\"].image_size;\n        setImgSize({\n          w: imgS[0],\n          h: imgS[1]\n        });\n        \n      }\n    });\n  }\n\n  function predict(e){\n    e.preventDefault();\n    makePrediction(imagedata[currentIndex].image_url, imagedata[currentIndex].key);\n  }\n\n  //------------------- handle human annotation ----------------------\n  function addNewBox(e){\n    e.preventDefault();\n    //add new bounding box\n    boxRefs.current[boxCount] = createRef();\n    setHumanBoxes(humanboxes => [\n      ...humanboxes,\n      {\n          x: 10,\n          y: 10,\n          width: 100,\n          height: 100,\n          name: `rect${boxCount + 1}`,\n          stroke: '#cc0000',\n          key: shortid.generate(),\n          ref: boxRefs.current[boxCount].current\n      }\n    ]);\n\n    setBoxCount(boxCount + 1);\n  }\n  const handleRectChange = (index, newProps) => {\n    humanboxes[index] = {\n      ...humanboxes[index],\n      ...newProps,\n    };    \n    setHumanBoxes(humanboxes => [...humanboxes]);\n  };\n  // ---------------------------------------------------\n  const changeImg = (i) => {\n    setCurrentIndex(i);\n    setPredictions([]);\n    setHumanBoxes([]);\n  }\n\n  const imageLoad = (i) => {\n    setLoadCount(loadCount+1); \n  }\n\n  const handleStageMouseDown = (event) => {\n    \n    // clicked on stage - clear selection or ready to generate new rectangle\n    if (event.target.getType() === 'Stage') {\n      // const stage = event.target.getStage();\n      setMouseDown(true);\n      setSelectedBoxName(\"\");\n      return;\n    }\n\n    // clicked on transformer - do nothing\n    const clickedOnTransformer = event.target.getParent().className === 'Transformer';\n    if (clickedOnTransformer) {\n      return;\n    }\n\n    // find clicked rect by its name\n    const name = event.target.name();\n    \n    const rect = humanboxes.find(r => r.name === name);\n    if (rect) {\n      setSelectedBoxName(name);\n    } else {\n      setSelectedBoxName(\"\");\n    }\n  }; \n  const handleStageMouseUp = () => {\n    setMouseDown(false);\n  };\n\n  useEffect(() => {\n    fetchData(projectId).then(res => {\n      setData(res[\"data\"]);\n      refs.current = [];\n      res[\"image_data\"].map((item, i) => {\n        setImageData(imagedata=>[\n          ...imagedata,\n          {\n            id: item.id,\n            key: item.key,\n            image_url: item.image_url\n          }\n        ]);\n        refs.current[i] = createRef();  \n      \n      });\n      \n      setLoaded(true);\n      \n    });\n    \n  }, []);\n  \n  return (\n    <Container>\n      <div>\n        {loaded && imagedata.map( (item, i) => \n          <img key={i} style={ {display: \"none\"} } src={item.image_url} ref={refs.current[i]} onLoad={ () => {imageLoad(i)}}/>\n        )}\n      </div>\n      \n      <div>\n        {loaded && imagedata.map( (item, i) => \n          <Button key={i} circular size=\"tiny\" onClick={ ()=> changeImg(i) } content={i} />  \n        )}\n      </div>  \n\n      {loaded && loadCount == imagedata.length && (\n        <div>\n          <div style={ {float: \"left\", display: \"block\"} }>\n            <Stage \n              style={ {float: \"left\"} } \n              width={refs.current[currentIndex].current.width} \n              height={refs.current[currentIndex].current.height}\n              onMouseDown={handleStageMouseDown}\n              onTouchStart={handleStageMouseDown}\n\n              onMouseUp={mouseDown && handleStageMouseUp}\n              onTouchEnd={mouseDown && handleStageMouseUp}\n            >\n            <Layer><Image image={refs.current[currentIndex].current}/></Layer>\n            <Layer>\n            {!predloading && predictions.map((box, idx) => \n              <Group key={idx}>\n                {/* <Rect x={box.box[1]*imgSize.w} y={box.box[0]*imgSize.h} width={(box.box[3]-box.box[1])*imgSize.w} height={ (box.box[2]-box.box[0])*imgSize.h} stroke={'#33d6ff'} strokeWidth={2} /> */}\n                <MyRect x={box.box[1]*imgSize.w} y={box.box[0]*imgSize.h} width={(box.box[3]-box.box[1])*imgSize.w} height={ (box.box[2]-box.box[0])*imgSize.h} stroke={'#33d6ff'} strokeWidth={2} name={box.label+'-'+idx}/>\n                <Text x={box.box[1]*imgSize.w} y={box.box[0]*imgSize.h} fill={'#ccf5ff'} fontSize={20} text={box.label} />\n              </Group>  \n            )}\n            </Layer>\n            <Layer>\n              {humanboxes.map((rect, i) => (\n                <MyRectangle\n                  ref={boxRefs.current[i].current}\n                  sclassName=\"rect\"\n                  key={rect.key}\n                  {...rect}\n                  \n                  onTransform={(newProps) => {\n                    handleRectChange(i, newProps);\n                  }}\n                />\n              ))}\n              <MyRectTransformer selectedShapeName={selectedBoxName} />\n            </Layer>\n            </Stage>\n          </div>\n          \n          <div style={ {float: \"left\", marginLeft: \"10px\",  display: \"block\" } }>\n          <Button onClick={predict}>Predict</Button>\n          {!predloading && predictions.map((box, idx) => \n              <div key={idx}>{box.label}</div>\n            )}\n          </div>\n          <div style={ {float: \"left\", marginLeft: \"10px\",  display: \"block\"} }>\n            <Button onClick={addNewBox}>Add</Button>\n          </div>\n        </div>  \n      )}\n      \n    </Container>\n  )\n}\nexport default AnnotatePage;","import React, { useEffect, useState, useRef, createRef } from 'react';\nimport { Container, Button, TextArea, Form, Grid, Input, Header, Label, Divider} from \"semantic-ui-react\";\n\nimport { useForm, useFieldArray } from 'react-hook-form';\n\nimport { Stage, Layer, Image, Rect} from 'react-konva';\nimport MyRectangle from '../AnnotationTool/MyRectangle';\nimport MyRectTransformer from '../AnnotationTool/MyRectTransformer';\nimport '../../App.css';\n\nimport axios from \"axios\";\nimport shortid from 'shortid';\n\n\nasync function addObjectStoryToServer(data) {\n  let result = await axios.post(process.env.REACT_APP_API_URL+'/api/add_objectstory', data);\n  return result.data\n}\n\nasync function fetchImageData(imgId) {\n  const result = await axios.post(process.env.REACT_APP_API_URL + '/api/get_image_by_id', {\n    \"image_id\": imgId\n  });\n  return result.data\n}\nasync function fetchStoryData(imgId) {\n  const result = await axios.post(process.env.REACT_APP_API_URL + '/api/get_stories_by_image_id', {\n    \"image_id\": imgId\n  });\n  return result.data\n}\n\nfunction ObjectStoryMtask({ match }) {\n  const [imagedata, setImageData] = useState({});\n  \n  const [loaded, setLoad] = useState(false);\n  const [storyloaded, setStoryLoad] = useState(false);\n  const [imageloaded, setImageLoad] = useState(false);\n  const imgRef = useRef();\n\n  const [storyData, setStoryData] = useState([]);\n  const [storyCount, setStoryCount] = useState(0);\n  const [postSuccess, setPostSuccess] = useState(false);\n\n\n  // add bounding boxes on the photo\n  const [humanboxes, setHumanBoxes] = useState([]);\n  const [boxCount, setBoxCount] = useState(0);\n  const boxRefs = useRef([]);\n  const [selectedBoxName, setSelectedBoxName] = useState(\"\");\n  const [hoverBoxName, setHoverBoxName] = useState(\"\");\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const imageId = match.params.imgid;\n  const [worker, setWorker] = useState(\"\");\n\n  const imageW = 800;\n\n  const imageLoad = () => {\n    setImageLoad(true);\n  }  \n  // ----------------- handle story annoation ----------------------\n  const { control, register, errors, formState, handleSubmit } = useForm({\n    mode: \"onBlur\",\n    defaultValue: {\n      story: \"\",\n      object: []\n    }\n  });\n  const { append, remove } = useFieldArray({\n    control,\n    name: \"object\"\n  });\n  \n\n  // add new story to server\n  const onSubmit = (data, e) => {\n    const object_list = [];\n    const imageH = imgRef.current.height*(imageW/imgRef.current.width);\n    data.object.map((item, index) => {\n      \n      object_list.push({\n        \"label\": item.name,\n        \"x\": humanboxes[index].x/imageW,\n        \"y\": humanboxes[index].y/imageH,\n        \"w\": humanboxes[index].width/imageW,\n        \"h\": humanboxes[index].height/imageH\n      });\n    });\n    const results = {\n      \"created_user\": worker,\n      \"image_id\": imageId,\n      \"story\": data.story,\n      \"object_list\": object_list\n    }\n    addObjectStoryToServer(results).then(() => {\n      setPostSuccess(true);\n      e.target.reset();\n      setHumanBoxes([]);\n    });\n  };\n\n  //------------------- handle human annotation ----------------------\n  function addNewBox(e){\n    e.preventDefault();\n\n    //add new bounding box\n    boxRefs.current[boxCount] = createRef();\n    let boxKey = shortid.generate()\n    setHumanBoxes(humanboxes => [\n      ...humanboxes,\n      {\n          x: 10,\n          y: 10,\n          width: 100,\n          height: 100,\n          key: boxKey,\n          name: `rect${boxKey}`,\n          stroke: '#2982F9',\n          \n          lable: 'none'\n      }\n    ]);\n    append({ name:  boxKey});\n    setBoxCount(boxCount + 1);\n  }\n  \n  const handleStageMouseDown = (event) => {\n    // clicked on stage - clear selection or ready to generate new rectangle\n    if (event.target.getType() === 'Stage') {\n      // const stage = event.target.getStage();\n      setMouseDown(true);\n      setSelectedBoxName(\"\");\n      return;\n    }\n\n    // clicked on transformer - do nothing\n    const clickedOnTransformer = event.target.getParent().className === 'Transformer';\n    if (clickedOnTransformer) {\n      return;\n    }\n\n    // find clicked rect by its name\n    const name = event.target.name();\n    \n    const rect = humanboxes.find(r => r.name === name);\n    if (rect) {\n      setSelectedBoxName(name);\n    } else {\n      setSelectedBoxName(\"\");\n    }\n  }; \n  const handleStageMouseUp = () => {\n    setMouseDown(false);\n  };\n\n  const handleRectChange = (index, newProps) => {\n    humanboxes[index] = {\n      ...humanboxes[index],\n      ...newProps,\n    };\n    \n    setHumanBoxes(humanboxes => [...humanboxes]);\n  };\n\n  const handleLabelMouseEnter = (index, rect) => {\n    rect.stroke = \"#8AE1FF\";\n    humanboxes[index] = {\n        ...humanboxes[index],\n        ...rect,\n      };\n    \n    setHumanBoxes(humanboxes => [...humanboxes]);\n    \n    setHoverBoxName(rect.name);\n  };\n\n  const handleLabelMouseLeave = (index, rect) => {\n    rect.stroke = \"#2982F9\";\n    humanboxes[index] = {\n        ...humanboxes[index],\n        ...rect,\n      };    \n    setHumanBoxes(humanboxes => [...humanboxes]);\n    setHoverBoxName(\"\");\n  };\n\n  const removeObject = (index) => {\n    \n    humanboxes.splice(index, 1);\n    setHumanBoxes(humanboxes => [...humanboxes]);\n    setBoxCount(boxCount - 1);\n    remove(index);\n  };\n\n  // ----------------------------------------------------------------\n  useEffect(()=> {\n    fetchImageData(imageId).then(res => {        \n        setImageData(res[\"data\"]);\n        setLoad(true);\n    });\n    console.log(\"fetch image url\");\n  }, []);\n\n  useEffect(()=> {\n    fetchStoryData(imageId).then(res => {\n        setStoryData(res[\"data\"]);\n        console.log(res[\"data\"]);\n        setStoryLoad(true);\n    });\n    console.log(\"fetch story data\");\n  }, [])\n  \n  return (\n    <Container>\n        \n        {loaded &&\n        <Grid celled>\n            <Grid.Row>\n            <img style={ {display: \"none\"} } src={imagedata.image_url} ref={imgRef} onLoad={ () => {imageLoad()}}/>\n            <Grid.Column width={12} >\n            {imageloaded &&\n                <Stage \n                    width={imageW}\n                    height={imgRef.current.height*(imageW/imgRef.current.width)}\n\n                    onMouseDown={handleStageMouseDown}\n                    onTouchStart={handleStageMouseDown}\n\n                    onMouseUp={mouseDown && handleStageMouseUp}\n                    onTouchEnd={mouseDown && handleStageMouseUp}\n                >\n                    <Layer><Image image={imgRef.current} width={ imageW } height={imgRef.current.height*(imageW/imgRef.current.width)}></Image></Layer>  \n                    <Layer>\n                      {storyData.map((story, i) => (\n                        story.object_list.map((object, j) => (\n                          <Rect\n                            key={shortid.generate()}\n                            x={object.x*imageW} \n                            y={object.y*imgRef.current.height*(imageW/imgRef.current.width)}\n                            width={object.w*imageW} \n                            height={object.h*imgRef.current.height*(imageW/imgRef.current.width)}\n                            scaleX={1}\n                            scaleY={1}\n                            stroke={\"#ff3333\"}\n                            strokeWidth={2}\n                            />\n                        ))\n                      ))}\n                    </Layer>\n                    <Layer>\n                        {humanboxes.map((rect, i) => (\n                            <MyRectangle\n                            // ref={boxRefs.current[i]}\n                            sclassName=\"rect\"\n                            key={rect.key}\n                            {...rect}\n                            \n                            onTransform={(newProps) => {\n                                handleRectChange(i, newProps);\n                            }}\n\n                            //hover event\n                            onEnter={(newProps) => {\n                                setHoverBoxName(newProps);\n                            }}\n                            onLeave={(newProps) => {\n                                setHoverBoxName(\"\");\n                            }}\n                            />\n                        ))}\n                        <MyRectTransformer selectedShapeName={selectedBoxName} />\n                    </Layer>\n                </Stage>\n\n            }\n            </Grid.Column> \n            <Grid.Column width={4}>\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Grid.Row>\n                <Header as='h4' block>Step 1: Tell a story</Header>\n                    <div>Some <b>invisible people</b> (one or many) were doing something in this photo; however you cannot see them but only their traces.<br/><br/>\n                    Please speculate a possible story or scenario to describe <b>WHO</b> and <b>WHAT activity</b> are they doing.\n                    </div>\n                    <textarea placeholder='Tell us a story about this image' style={{ marginTop: '6px', minHeight: '50px' }} name=\"story\" ref={register({ required: true })}/>\n                    {errors.story && <Label pointing prompt>Story is required</Label>}\n                    \n                </Grid.Row>\n                <Grid.Row style={{ marginTop: '2em'}}>\n                    <Header as='h4' block>Step 2: Identify key objects</Header>\n                    <div>Please identify <b>key objects</b> that shape your your written story.</div>\n                    \n                    <Button fluid color=\"blue\" onClick={addNewBox} style={{ marginTop: '6px', marginBottom: '6px'}}>Add An Object</Button>\n                    \n                    {humanboxes.map((rect, i) => (\n                        <div key={rect.key} \n                             style={{ marginBottom: '2px'}} \n                             className={`${hoverBoxName == rect.name ? \"hoveredBox\" : \"\"}`}\n                             onMouseEnter={()=> {\n                                handleLabelMouseEnter(i, rect);\n                             }} \n                             onMouseLeave={()=> {\n                                handleLabelMouseLeave(i, rect);\n                             }} >\n                            \n                            <div className=\"ui icon input\" style={{width: '100%'}} >\n                              <input type=\"text\" placeholder={'object '+(i+1)} name={`object[${i}].name`} ref={register({ required: true })}/>\n                              <i aria-hidden=\"true\" className=\"remove circular inverted link icon\" onClick={ ()=>removeObject(i)}></i>\n                            </div>\n                            \n                            {/* different style of delete button */}\n                            {/* <div className=\"ui action input\" >\n                            <input placeholder={'object '+(i+1)} \n                             name=\"object\"\n                             ref={register({ required: true })}\n                            />\n                              <button className=\"ui icon button\" onClick={ ()=>removeObject(i) }><i aria-hidden=\"true\" className=\"invert remove icon\"></i></button>\n                            </div> */}\n                            \n                        </div>\n                    ))}\n                \n                </Grid.Row>\n\n                {humanboxes.length !== 0 &&\n                <Grid.Row style={{ marginTop: '5em'}}>\n                    {formState.isValid && <Button fluid color=\"teal\" style={{ marginBottom: '6px'}}>Submit this story!</Button> }\n                    {!formState.isValid && <Button disabled fluid color=\"teal\" style={{ marginBottom: '6px'}}>Submit this story!</Button> }\n                </Grid.Row>\n                }\n              </Form>\n            </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column width={16}>\n              {storyData.map((story, i) => (\n                  <Grid.Row key={\"story-\"+i} >\n                    <div>Story {i+1}: {story.story}\n                    {story.object_list.map((object, j) => (\n                      <Label style={{ marginLeft: '3px'}} key={\"obj-\"+i+\"-\"+j} color={\"grey\"} mini>{object.label}</Label>\n                    ))}\n                    <Divider />\n                    </div>\n                    </Grid.Row>\n                  ))}\n              </Grid.Column>\n            </Grid.Row>\n            \n            \n            \n               \n            \n        </Grid>\n        }\n\n    </Container>    \n  )\n}\nexport default ObjectStoryMtask;","import React, { useEffect, useState } from 'react';\nimport { Container, Item, Button, Card, Image} from \"semantic-ui-react\";\nimport { Link } from 'react-router-dom';\nimport axios from \"axios\";\n\nasync function fetchProjectData(pid) {\n  const result = await axios.post(process.env.REACT_APP_API_URL + '/api/get_project_by_id', {\n    \"project_id\": pid.toString()\n  });\n  return result.data\n}\n\nasync function fetchData(){\n  const result = await axios.get(process.env.REACT_APP_API_URL+'/api/get_all_projects');\n  // const result = await axios.get('/api/get_all_projects');\n  return result.data.all_projects \n}\nasync function deleteImage(image_id){\n}\nasync function deleteProject(project_id){\n}\n\nfunction ProjectManagement() {\n  const [data, setData] = useState([]);\n\n  const getProjectData = (indx, pid) => {\n    console.log(\"fetch \"+indx);\n    console.log(data[indx]);\n    if(\"image_data\" in data[indx]){\n        console.log(\"fetch already!!!\");\n    }else{\n        console.log(\"fetch data from project \"+ pid);\n        fetchProjectData(pid).then(res=>{\n          data[indx] = {\n              ...data[indx],\n              \"image_data\": res[\"image_data\"]\n          }\n          setData(data => [...data]); \n\n        });\n    }\n    \n    //how to update state??????\n    console.log(indx);\n    console.log(data);\n    \n  }\n\n\n  useEffect(()=> {   \n    fetchData().then(res =>{\n        res.map(item => {\n            setData(data => [\n              ...data,\n              {\n                \"data\": item,\n              }\n            ]);\n        });\n    });\n  }, []);\n  \n  return (\n    <Container>\n      <Item.Group divided>\n        {data.map((item, indx) =>\n          <Item key={indx}>\n            <Item.Content>\n              <Item.Header>{item[\"data\"].title}</Item.Header>\n              <Item.Description>{item[\"data\"].description}</Item.Description>\n              <Item.Extra>\n                  <Button onClick={ () => getProjectData(indx, item[\"data\"].id) }>See Details {item.id}</Button>\n              </Item.Extra>\n              <Item.Extra>\n              <Card.Group itemsPerRow={5}>\n                  {(\"image_data\" in item) && item[\"image_data\"].map((img, img_indx)=>(\n                    <Card key={img.key}>\n                      <Card.Content>\n                        <Image src={img.image_url} />\n                      </Card.Content>\n                      <Button attached='bottom'>Delete</Button>\n                    </Card>\n                  ))}\n                </Card.Group>\n              </Item.Extra>\n            </Item.Content>\n            \n          </Item>\n        )}\n      </Item.Group>    \n    </Container>\n  )\n}\nexport default ProjectManagement;","import React from 'react';\nimport { \n    HashRouter as Router,\n    Switch,\n    Link,\n    Route\n} from 'react-router-dom';\nimport { Menu, Button } from 'semantic-ui-react'\nimport { createBrowserHistory } from \"history\";\n\nimport './index.css';\nimport ProjectsIndex from './components/ProjectsIndex';\nimport Project from './components/Project';\nimport AddProject from './components/AddProject';\nimport AnnotatePage from './components/AnnotatePage';\nimport ObjectStoryMtask from './components/CrowdTasks/ObjectStoryMTask';\n\nimport ProjectManagement from './components/Dashboard/ProjectManagement';\n\nconst customHistory = createBrowserHistory();\n\nexport default (\n    <Router history={customHistory}>\n        <Menu>\n          <Menu.Item><Link to=\"/\">Home</Link></Menu.Item>\n          <Menu.Item position='right'><Button color=\"teal\" as={Link} to=\"/addProject\">Add Project</Button></Menu.Item>\n        </Menu>\n        <Switch>\n            <Route exact path=\"/\" component={ProjectsIndex} />\n            <Route path=\"/projects\" component={ProjectsIndex} />\n            <Route path=\"/project/:pid\" component={Project} />\n            <Route path=\"/annotate/:pid\" component={AnnotatePage} />\n            <Route path=\"/addProject\" component={AddProject} />\n            \n            <Route path=\"/annotateObjectStory/:imgid\" component={ObjectStoryMtask} />\n\n            <Route path=\"/dashboard\" component={ProjectManagement} />\n        </Switch>\n    </Router>\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import './index.css';\n// import App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport routes from './routes';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        {routes}\n    </div>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}