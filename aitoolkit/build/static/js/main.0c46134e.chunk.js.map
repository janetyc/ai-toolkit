{"version":3,"sources":["components/DropZone.js","components/ImageWithPredictions.js","components/Images.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","DropZone","setImages","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onload","e","currentImages","id","cuid","src","target","result","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","classifyImg","classifier","image","predict","err","results","console","error","Img","img","Prediction","ImageWithPredictions","imgRef","useRef","useState","predictions","setPredictions","useEffect","a","current","generatePredictions","key","alt","ref","map","pred","i","label","confidence","roundedConfidence","Math","floor","List","ul","Images","data","globalStyle","css","initClassifier","callback","ml5","App","images","loaded","setLoaded","classifierRef","styles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mjBAKA,IAAMA,EAAYC,IAAOC,IAAV,KA0CAC,EA9BE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACZC,EAASC,uBACb,SAAAC,GACEA,EAAcC,SAAQ,SAAAC,GACpB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAASC,GACvBT,GAAU,SAAAU,GAAa,4BAClBA,GADkB,CAErB,CAAEC,GAAIC,MAAQC,IAAKJ,EAAEK,OAAOC,cAGhCT,EAAOU,cAAcX,QAGzB,CAACL,IAd+B,EAiBoBiB,YAAY,CAAEhB,WAA5DiB,EAjB0B,EAiB1BA,aAAcC,EAjBY,EAiBZA,cAAeC,EAjBH,EAiBGA,aACrC,OACE,kBAACxB,EAAcsB,IACb,0BAAWC,KACVC,EACC,sDAEA,wF,2VCtCR,IAAMC,EAAc,SAACC,EAAYC,GAAb,OAClBD,EAAWE,QAAQD,EAAO,GAAG,SAACE,EAAKC,GAEjC,OADID,GAAKE,QAAQC,MAAM,gCAChBF,MAGLG,EAAMhC,IAAOiC,IAAV,KAOHC,EAAalC,IAAOC,IAAV,KAkCDkC,EA5Bc,SAAC,GAA6B,IAA3BV,EAA0B,EAA1BA,WAAYX,EAAc,EAAdA,GAAIE,EAAU,EAAVA,IACxCoB,EAASC,mBADyC,EAElBC,mBAAS,IAFS,mBAEjDC,EAFiD,KAEpCC,EAFoC,KAWxD,OARAC,qBAAU,YACiB,uCAAG,4BAAAC,EAAA,sEACAlB,EAAYC,EAAYW,EAAOO,SAD/B,OACpBJ,EADoB,OAE1BC,EAAeD,GAFW,2CAAH,qDAIzBK,KACC,CAACnB,IAGF,6BACE,kBAACO,EAAD,CAAKa,IAAK/B,EAAIgC,IAAG,gBAAWhC,GAAME,IAAKA,EAAK+B,IAAKX,IAChDG,EAAYS,KAAI,SAACC,EAAMC,GAAO,IACrBC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,WACTC,EAAoBC,KAAKC,MAAmB,IAAbH,GAAsB,IAAM,IACjE,OACE,kBAAClB,EAAD,CAAYW,IAAKK,GACf,8BAAOC,GACP,8BAAOE,S,yNCrCnB,IAAMG,EAAOxD,IAAOyD,GAAV,KA0BKC,EAhBA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMlC,EAAiB,EAAjBA,WACtB,OACE,kBAAC+B,EAAD,KACGG,EAAKX,KAAI,SAAAtB,GAAK,OACb,wBAAImB,IAAKnB,EAAMZ,IACb,kBAAC,EAAD,CACEA,GAAIY,EAAMZ,GACVE,IAAKU,EAAMV,IACXS,WAAYA,U,+OChBxB,IAAMmC,EAAcC,YAAH,KAOXC,EAAiB,SAAAC,GAAQ,OAC7BC,kBAAoB,aAAa,kBAAMD,GAAYA,QAuBtCE,MArBf,WAAgB,IAAD,EACe3B,mBAAS,IADxB,mBACN4B,EADM,KACE/D,EADF,OAEemC,oBAAS,GAFxB,mBAEN6B,EAFM,KAEEC,EAFF,KAGPC,EAAgBhC,mBAMtB,OAJAI,qBAAU,WACR4B,EAAc1B,QAAUmB,GAAe,kBAAMM,GAAU,QACtD,IAGD,6BACE,kBAAC,IAAD,CAAQE,OAAQV,KACdO,GAAU,oDACXA,GAAU,kBAAC,EAAD,CAAUhE,UAAWA,IAC/BgE,GACC,kBAAC,EAAD,CAAQR,KAAMO,EAAQzC,WAAY4C,EAAc1B,YCpBpC4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c46134e.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport cuid from 'cuid';\nimport styled from '@emotion/styled';\n\nconst Container = styled.div`\n  display: flex;\n  width: 80%;\n  height: 400px;\n  margin: 100px auto 0 auto;\n  background: lightgray;\n  border: 4px dotted darkgray;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst DropZone = ({ setImages }) => {\n  const onDrop = useCallback(\n    acceptedFiles => {\n      acceptedFiles.forEach(file => {\n        const reader = new FileReader();\n        reader.onload = function(e) {\n          setImages(currentImages => [\n            ...currentImages,\n            { id: cuid(), src: e.target.result }\n          ]);\n        };\n        reader.readAsDataURL(file);\n      });\n    },\n    [setImages]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n  return (\n    <Container {...getRootProps()}>\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      )}\n    </Container>\n  );\n};\n\nexport default DropZone;\n","import React, { useRef, useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\n\nconst classifyImg = (classifier, image) =>\n  classifier.predict(image, 5, (err, results) => {\n    if (err) console.error('Unable to make a prediction.');\n    return results;\n  });\n\nconst Img = styled.img`\n  width: 200px;\n  box-shadow: 0px 0px 13px -1px rgba(0, 0, 0, 0.4);\n  margin: 16px;\n  border-radius: 8px;\n`;\n\nconst Prediction = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 10px;\n`;\n\nconst ImageWithPredictions = ({ classifier, id, src }) => {\n  const imgRef = useRef();\n  const [predictions, setPredictions] = useState([]);\n  useEffect(() => {\n    const generatePredictions = async () => {\n      const predictions = await classifyImg(classifier, imgRef.current);\n      setPredictions(predictions);\n    };\n    generatePredictions();\n  }, [classifier]);\n\n  return (\n    <div>\n      <Img key={id} alt={`img - ${id}`} src={src} ref={imgRef} />\n      {predictions.map((pred, i) => {\n        const { label, confidence } = pred;\n        const roundedConfidence = Math.floor(confidence * 10000) / 100 + '%';\n        return (\n          <Prediction key={i}>\n            <span>{label}</span>\n            <span>{roundedConfidence}</span>\n          </Prediction>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ImageWithPredictions;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport ImageWithPredictions from './ImageWithPredictions';\n\nconst List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0;\n  width: 100%;\n  justify-content: flex-start;\n  align-items: center;\n  list-style: none;\n`;\n\nconst Images = ({ data, classifier }) => {\n  return (\n    <List>\n      {data.map(image => (\n        <li key={image.id}>\n          <ImageWithPredictions\n            id={image.id}\n            src={image.src}\n            classifier={classifier}\n          ></ImageWithPredictions>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nexport default Images;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Global, css } from '@emotion/core';\nimport * as ml5 from 'ml5';\n\nimport DropZone from './components/DropZone';\nimport Images from './components/Images';\n\nconst globalStyle = css`\n  * {\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\n      Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n  }\n`;\n\nconst initClassifier = callback =>\n  ml5.imageClassifier('MobileNet', () => callback && callback());\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const classifierRef = useRef();\n\n  useEffect(() => {\n    classifierRef.current = initClassifier(() => setLoaded(true));\n  }, []);\n\n  return (\n    <div>\n      <Global styles={globalStyle} />\n      {!loaded && <h1>Loading ml5 model...</h1>}\n      {loaded && <DropZone setImages={setImages} />}\n      {loaded && (\n        <Images data={images} classifier={classifierRef.current}></Images>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}